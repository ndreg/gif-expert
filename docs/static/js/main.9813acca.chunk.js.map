{"version":3,"sources":["Components/AddCategory.jsx","helpers/getGifs.js","Components/GifGridItem.jsx","Components/GifGrid.jsx","hooks/useFetchGifs.js","Components/GifExpertApp.jsx","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","category","className","type","value","onChange","target","getGifs","a","fetch","encodeURI","url","json","data","gifs","map","img","id","title","gif","images","downsized_medium","GifGridItem","src","alt","GifGrid","loading","state","setstate","useEffect","then","useFetchGifs","GifExpert","categories","root","document","getElementById","ReactDOM","render"],"mappings":"yMAoCeA,EAjCK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEHC,mBAAS,IAFN,mBAEhCC,EAFgC,KAEpBC,EAFoB,KAgBvC,OACE,uBAAMC,SATa,SAAAC,GACnBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAc,SAAAS,GAAQ,OAAKP,GAAL,mBAAoBO,OAC1CN,EAAc,MAKcO,UAAU,YAAxC,UACE,uBACEA,UAAU,cACVC,KAAK,OACLC,MAAOV,EACPW,SAlBc,SAAAR,GAClBF,EAAcE,EAAES,OAAOF,UAmBrB,wBAAQF,UAAU,gBAAlB,wB,+BC3BOK,EAAO,uCAAG,WAAMN,GAAN,qBAAAO,EAAA,sEAELC,MAAM,0CAAD,OAA2CC,UAAUT,GAArD,uDAFA,cAEjBU,EAFiB,gBAGFA,EAAIC,OAHF,uBAGhBC,EAHgB,EAGhBA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAClB,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXC,IAAKH,EAAII,OAAOC,iBAAiBV,QAThB,kBAadG,GAbc,2CAAH,sDCAPQ,EAAc,SAAC,GAAkB,IAAjBJ,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAElC,OACE,sBAAKjB,UAAU,6CAAf,UACE,qBAAKqB,IAAKJ,EAAKK,IAAKN,IACpB,4BAAIA,QCFGO,EAAU,SAAC,GAAgB,IAAfxB,EAAc,EAAdA,SAAc,ECAX,SAACA,GAAc,IAAD,EAEdR,mBAAS,CACjCoB,KAAM,GACNa,SAAS,IAJ6B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAkBxC,OAXAC,qBACE,WACEtB,EAAQN,GACL6B,MAAK,SAAAd,GAAG,OACLY,EAAS,CACPf,KAAMG,EACNU,SAAS,SAGlB,CAACzB,IAEG0B,EDhBqBI,CAAa9B,GAA7Be,EAFyB,EAE9BH,KAAUa,EAFoB,EAEpBA,QAEjB,OACE,qCACA,6BAAKzB,IACJyB,GAAW,6CACZ,qBAAKxB,UAAU,WAAf,SAEEc,EAAID,KAAI,SAAAC,GAAG,OACT,cAAC,EAAD,eAEMA,GADCA,EAAIC,aEUJe,EArBG,WAAO,IAAD,EAEcvC,mBAAS,CAAC,KAFxB,mBAEfwC,EAFe,KAEHzC,EAFG,KAItB,OACA,qCACA,sBAAKU,UAAU,cAAf,UACA,oBAAIA,UAAU,YAAd,4BACA,cAAC,EAAD,CAAaV,cAAeA,OAE5B,6BAEEyC,EAAWlB,KAAI,SAAAd,GAAQ,OAAI,cAAC,EAAD,CAEzBA,SAAUA,GADLA,YCdLiC,EAAOC,SAASC,eAAe,QAErCC,IAASC,OACP,cAAC,EAAD,IACAJ,K","file":"static/js/main.9813acca.chunk.js","sourcesContent":["import { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ({setCategories}) => {\n  \n  const [inputValue, setInputValue] = useState('')\n\n  const handleValue = e => {\n    setInputValue(e.target.value);\n  }\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if(inputValue.trim().length > 0){\n      setCategories(category => [inputValue, ...category]);\n      setInputValue('');\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit} className=\"form-area\">\n      <input \n        className=\"input--text\" \n        type=\"text\"\n        value={inputValue}\n        onChange={handleValue}\n      />\n      <button className=\"input--search\">Search</button>\n    </form>\n  )\n}\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n}\n\nexport default AddCategory;","export const getGifs = async(category)=> {\n\n  let url = await fetch(`https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&api_key=IBnVIMwRONZOYHwLyV8PTX9kflzRGHyG&limit=10`)\n  let {data} = await url.json();\n\n  let gifs = data.map(img => {\n    return {\n      id: img.id,\n      title: img.title,\n      gif: img.images.downsized_medium.url,\n    }\n  })\n\n  return gifs\n}","export const GifGridItem = ({title, gif}) => {\n  \n  return (\n    <div className=\"gif-card animate__animated animate__fadeIn\">\n      <img src={gif} alt={title}/>\n      <p>{title}</p>\n    </div>\n  )\n}\n","import { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({category}) => {\n\n  const {data:img, loading} = useFetchGifs(category);\n\n  return (\n    <>\n    <h3>{category}</h3>\n    {loading && <h3>Cargando...</h3>}\n    <div className=\"gif-grid\">\n    {\n      img.map(img => (\n        <GifGridItem\n          key={img.id}\n          {...img}\n          />))\n    }\n    </div>\n    </>\n  )\n}","import { useState, useEffect } from 'react'\nimport { getGifs } from '../helpers/getGifs'\n\nexport const useFetchGifs = (category) => {\n  \n  const [state, setstate] = useState({\n    data: [],\n    loading: true,\n  })\n\n  useEffect(\n    ()=> {\n      getGifs(category)\n        .then(img => \n            setstate({\n              data: img,\n              loading: false\n            })\n        )\n  }, [category])\n\n  return state;\n}","import {useState} from 'react';\nimport AddCategory from './AddCategory';\nimport { GifGrid } from './GifGrid';\n\nconst GifExpert = () => {\n\n  const [categories, setCategories] = useState([''])\n\n  return (\n  <>\n  <div className=\"search-area\">\n  <h2 className=\"title-app\">Gif Expert App</h2>\n  <AddCategory setCategories={setCategories}/>\n  </div>\n  <ul>\n  {\n    categories.map(category => <GifGrid \n      key={category}\n      category={category}/>)\n  }\n  </ul>\n  </>\n  )\n};\n\nexport default GifExpert;","import ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpert from './Components/GifExpertApp'\nconst root = document.getElementById('root')\n\nReactDOM.render(\n  <GifExpert />,\n  root\n);\n"],"sourceRoot":""}